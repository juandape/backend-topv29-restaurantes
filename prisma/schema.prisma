// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Countries {
  id     String   @id @default(cuid()) @map("_id") @db.ObjectId
  name   String
  cities Cities[]
}

model Cities {
  id          String      @id @default(cuid()) @map("_id") @db.ObjectId
  name        String
  country     Countries   @relation(fields: [country_Id], references: [id])
  country_Id  String      @db.ObjectId
  localidades Locations[]
}

model Locations {
  id         String       @id @default(cuid()) @map("_id") @db.ObjectId
  name       String
  city       Cities       @relation(fields: [city_Id], references: [id])
  city_Id    String       @db.ObjectId
  ubications Ubications[]
}

model Ubications {
  id           String        @id @default(cuid()) @map("_id") @db.ObjectId
  localidad    Locations     @relation(fields: [localidad_Id], references: [id])
  localidad_Id String        @db.ObjectId
  client       clients[]
  restaurant   Restaurants[]
}

model Categories {
  id    String  @id @default(cuid()) @map("_id") @db.ObjectId
  name  String
  foods Foods[]
}

model Foods {
  id           String        @id @default(cuid()) @map("_id") @db.ObjectId
  name         String
  category     Categories    @relation(fields: [category_Id], references: [id])
  category_Id  String        @db.ObjectId
  calification String
  restaurant   Restaurants[]
}

model clients {
  id           String     @id @default(cuid()) @map("_id") @db.ObjectId
  name         String
  direccion    String
  ubication    Ubications @relation(fields: [ubication_Id], references: [id])
  ubication_Id String     @db.ObjectId
  pedidos      Pedidos[]
}

model Admins {
  id         String        @id @default(cuid()) @map("_id") @db.ObjectId
  name       String
  restaurant Restaurants[]
}

model Restaurants {
  id           String     @id @default(cuid()) @map("_id") @db.ObjectId
  name         String
  direccion    String
  food         Foods      @relation(fields: [food_Id], references: [id])
  food_Id      String     @db.ObjectId
  ubication    Ubications @relation(fields: [ubication_Id], references: [id])
  ubication_Id String     @db.ObjectId
  admin        Admins     @relation(fields: [admin_Id], references: [id])
  admin_Id     String     @db.ObjectId
  pedidos      Pedidos[]
}

model Details {
  id         String    @id @default(cuid()) @map("_id") @db.ObjectId
  date       String    @unique
  asistentes String
  hora       String
  pedidos    Pedidos[]
}

model Pedidos {
  id            String      @id @default(cuid()) @map("_id") @db.ObjectId
  restaurant    Restaurants @relation(fields: [restaurant_Id], references: [id])
  restaurant_Id String      @db.ObjectId
  detail        Details     @relation(fields: [detail_Id], references: [id])
  detail_Id     String      @db.ObjectId
  client        clients     @relation(fields: [client_Id], references: [id])
  client_Id     String      @db.ObjectId
}

model User {
  id                   String    @id @default(cuid()) @map("_id") @db.ObjectId
  email                String    @unique
  firstName            String
  lastName             String
  password             String
  isActive             Boolean   @default(false)
  avatar               String?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // relations
  roles UserRole[]
}

//tabla role
model Role {
  id        String   @id @default(cuid()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  users UserRole[]
}

model UserRole {
  id String @id @default(cuid()) @map("_id") @db.ObjectId

  // relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String @db.ObjectId
}
